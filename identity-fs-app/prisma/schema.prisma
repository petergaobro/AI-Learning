// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// model Post {
//     id String @id @default(auto()) @map("_id") @db.ObjectId

//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String @db.ObjectId

//     @@index([name])
// }

// Necessary for Next auth
// model Account {
//     id                String  @id @default(auto()) @map("_id") @db.ObjectId
//     userId            String  @db.ObjectId
//     type              String?
//     provider          String
//     providerAccountId String
//     refresh_token     String  @unique
//     access_token      String  @unique
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String               @id @default(auto()) @map("_id") @db.ObjectId
    name               String?
    username           String?              @unique
    email              String?              @unique
    emailVerified      Boolean?             @default(false)
    image              String?
    password           String?
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    verifyAt           DateTime?
    roleId             Role                 @default(USER)
    refresh_token      String?
    access_token       String?
    // accounts           Account[]
    sessions           Session[]
    // posts              Post[]
    verifyToken        VerifyToken[]
    passwordResetToken PasswordResetToken[]
    // audioClips         AudioClips[]
}

enum Role {
    USER
    ADMIN
}

model VerifyToken {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    token     String    @unique
    verifyAt  DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    User   User?   @relation(fields: [userId], references: [id])
    userId String? @db.ObjectId
}

model PasswordResetToken {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    token     String    @unique
    createdAt DateTime  @default(now())
    resetAt   DateTime?

    User   User?   @relation(fields: [userId], references: [id])
    userId String? @db.ObjectId
}

// model AudioClips {
//     id        String   @id @default(auto()) @map("_id") @db.ObjectId
//     fileName  String
//     createdAt DateTime @default(now())

//     User   User?   @relation(fields: [userId], references: [id])
//     userId String? @db.ObjectId
// }

// model VerificationToken {
//     id         String   @id @default(auto()) @map("_id") @db.ObjectId
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
